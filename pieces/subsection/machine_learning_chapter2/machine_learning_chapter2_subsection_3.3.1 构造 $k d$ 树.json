[
    {
        "strategy": "subsection",
        "source": "machine_learning_chapter2",
        "title": "3.3.1 构造 $k d$ 树",
        "content_length": 2098,
        "content": "Title: 3.3.1 构造 $k d$ 树\nContent:\n$k d$ 树是一种对 $k$ 维空间中的实例点进行存储以便对其进行快速检索的树形数据结构。 $k d$ 树是二叉树, 表示对 $k$ 维空间的一个划分（partition）。构造 $k d$ 树相当于不断地用垂直于坐标轴的超平面将 $k$ 维空间切分, 构成一系列的 $k$ 维超矩形区域。 $k d$ 树的每个结点对应于一个 $k$ 维超矩形区域。\n\n构造 $k d$ 树的方法如下: 构造根结点, 使根结点对应于 $k$ 维空间中包含所有实例点的超矩形区域; 通过下面的递归方法, 不断地对 $k$ 维空间进行切分, 生成子结点。在超矩形区域 (结点）上选择一个坐标轴和在此坐标轴上的一个切分点, 确定一个超平面, 这个超平面通过选定的切分点并垂直于选定的坐标轴, 将当前超矩形区域切分为左、右两个子区域 (子结点),这时实例被分到两个子区域。这个过程直到子区域内没有实例时终止（终止时的结点为叶结点)。在此过程中, 将实例保存在相应的结点上。\n\n通常, 依次选择坐标轴对空间切分, 选择训练实例点在选定坐标轴上的中位数 (median) ${ }^{1}$为切分点, 这样得到的 $k d$ 树是平衡的。注意, 平衡的 $k d$ 树搜索时的效率未必是最优的。\n\n下面给出构造 $k d$ 树的算法。\n\n\\section*{算法 3.2 (构造平衡 $\\boldsymbol{k} d$ 树)}\n输入: $k$ 维空间数据集 $T=\\left\\{x_{1}, x_{2}, \\cdots, x_{N}\\right\\}$, 其中 $x_{i}=\\left(x_{i}^{(1)}, x_{i}^{(2)}, \\cdots, x_{i}^{(k)}\\right)^{\\mathrm{T}}, i=$ $1,2, \\cdots, N$ 。\n\n输出: $k d$ 树。\n\n（1）开始: 构造根结点, 根结点对应于包含 $T$ 的 $k$ 维空间的超矩形区域。\n\n选择 $x^{(1)}$ 为坐标轴, 以 $T$ 中所有实例的 $x^{(1)}$ 坐标的中位数为切分点, 将根结点对应的超矩形区域切分为两个子区域。切分由通过切分点并与坐标轴 $x^{(1)}$ 垂直的超平面实现。\n\n由根结点生成深度为 1 的左、右子结点: 左子结点对应坐标 $x^{(1)}$ 小于切分点的子区域,右子结点对应坐标 $x^{(1)}$ 大于切分点的子区域。\n\n将落在切分超平面上的实例点保存在根结点。\n\n(2) 重复: 对深度为 $j$ 的结点, 选择 $x^{(l)}$ 为切分的坐标轴, $l=j(\\bmod k)+1$, 以该结点的区域中所有实例的 $x^{(l)}$ 坐标的中位数为切分点, 将该结点对应的超矩形区域切分为两个子区域。切分由通过切分点并与坐标轴 $x^{(l)}$ 垂直的超平面实现。\n\n由该结点生成深度为 $j+1$ 的左、右子结点: 左子结点对应坐标 $x^{(l)}$ 小于切分点的子区域, 右子结点对应坐标 $x^{(l)}$ 大于切分点的子区域。\n\n将落在切分超平面上的实例点保存在该结点。\n\n（3）直到两个子区域没有实例存在时停止，从而形成 $k d$ 树的区域划分。\n\n例 3.2 给定一个二维空间的数据集\n\n$$\nT=\\left\\{(2,3)^{\\mathrm{T}},(5,4)^{\\mathrm{T}},(9,6)^{\\mathrm{T}},(4,7)^{\\mathrm{T}},(8,1)^{\\mathrm{T}},(7,2)^{\\mathrm{T}}\\right\\}\n$$\n\n构造一个平衡 $k d$ 树 ${ }^{2}$ 。\n\\footnotetext{(1) 一组数据按大小顺序排列起来, 处在中间位置的一个数或最中间两个数的平均值。\n\n(2) 取自 Wikipedia。\n}\n解 根结点对应包含数据集 $T$ 的矩形, 选择 $x^{(1)}$ 轴, 6 个数据点的 $x^{(1)}$ 坐标的中位数是 $7^{(1)}$, 以平面 $x^{(1)}=7$ 将空间分为左、右两个子矩形 (子结点); 接着, 左矩形以 $x^{(2)}=4$分为两个子矩形, 右矩形以 $x^{(2)}=6$ 分为两个子矩形, 如此递归, 最后得到如图 3.3 所示的特征空间划分和如图 3.4 所示的 $k d$ 树。\n\n\\begin{center}\n\\includegraphics[max width=\\textwidth]{2024_03_13_c4e863166a24653ffd7cg-29(1)}\n\\end{center}\n\n图 3.3 特征空间划分\n\n\\begin{center}\n\\includegraphics[max width=\\textwidth]{2024_03_13_c4e863166a24653ffd7cg-29}\n\\end{center}\n\n图 $3.4 k d$ 树示例"
    },
    {
        "id": "chatcmpl-94056fD95PwZTogNWnOfU072zhdFP",
        "choices": [
            {
                "finish_reason": "stop",
                "index": 0,
                "logprobs": null,
                "message": {
                    "content": "{\n    \"问题1\": \"什么是 $k d$ 树？\",\n    \"回答1\": \"$k d$ 树是一种对 $k$ 维空间中的实例点进行存储以便对其进行快速检索的树形数据结构。它是二叉树，表示对 $k$ 维空间的一个划分，通过不断用垂直于坐标轴的超平面将 $k$ 维空间切分，构成一系列的 $k$ 维超矩形区域。\",\n    \"问题2\": \"构造 $k d$ 树的方法是怎样的？\",\n    \"回答2\": \"构造 $k d$ 树的方法是通过递归地对 $k$ 维空间进行切分，生成子结点。在超矩形区域上选择一个坐标轴和在此坐标轴上的一个切分点，确定一个超平面，将当前超矩形区域切分为左、右两个子区域（子结点），直到子区域内没有实例时终止。通常选择坐标轴对空间切分，并以训练实例点在选定坐标轴上的中位数为切分点，以得到平衡的 $k d$ 树。\",\n    \"问题3\": \"如何实现构造平衡 $k d$ 树的算法？\",\n    \"回答3\": \"构造平衡 $k d$ 树的算法包括以下步骤：首先构造根结点，选择一个坐标轴并以所有实例的该坐标轴坐标的中位数为切分点，将根结点对应的超矩形区域切分为两个子区域；然后通过递归地选择其他坐标轴进行切分，生成深度为 $j+1$ 的左、右子结点，直到两个子区域没有实例存在时停止，从而形成平衡的 $k d$ 树的区域划分。\",\n    \"问题4\": \"为什么要选择训练实例点在选定坐标轴上的中位数作为切分点？\",\n    \"回答4\": \"选择训练实例点在选定坐标轴上的中位数作为切分点可以得到平衡的 $k d$ 树。这样做可以保证每次切分都能够将数据集均匀地分割成两部分，从而使得生成的 $k d$ 树具有较好的搜索效率。\",\n    \"问题5\": \"平衡的 $k d$ 树搜索时的效率是否一定是最优的？\",\n    \"回答5\": \"平衡的 $k d$ 树搜索时的效率未必是最优的。尽管平衡的 $k d$ 树能够保证数据集被均匀地分割，但在实际应用中并不一定能够达到最优的搜索效率。因此，在实际使用中需要综合考虑数据特征和具体应用场景来选择合适的数据结构。\",\n    \"问题6\": \"$k d$ 树适用于哪些场景？\",\n    \"回答6\": \"$k d$ 树适用于需要对 $k$ 维空间中的实例点进行快速检索的场景。它能够有效地支持对多维空间中数据点进行高效搜索和查询，因此在各种需要高效检索多维数据的应用中得到广泛应用。\",\n    \"问题7\": \"$k d$ 树是如何存储和组织实例点的？\",\n    \"回答7\": \"$k d$ 树通过递归地切分超矩形区域，并生成相应的子结点来存储和组织实例点。每个结点对应一个 $k$ 维超矩形区域，并保存落在切分超平面上的实例点。\",\n    \"问题8\": \"除了 $k d$ 树外，还有哪些常见用于多维空间数据检索的数据结构？\",\n    \"回答8\": \"除了 $k d$ 树外，常见用于多维空间数据检索的数据结构还包括 R 树、VP 树、M 树等。这些数据结构都具有不同的特点和适用场景，在实际应用中需要根据具体需求选择合适的数据结构。\",\n    \"问题9\": \"如何选择合适的多维空间数据检索数据结构？\",\n    \"回答9\": \"选择合适的多维空间数据检索数据结构需要考虑数据特征、查询需求、更新频率等因素。不同数据结构具有不同的搜索效率、插入和删除操作效率等特点，因此需要根据具体应用场景来进行综合评估和选择。\",\n    \"问题10\": \"为什么需要平衡 $k d$ 树？\",\n    \"回答10\": \"平衡 $k d$ 树能够保证每次切分都能够将数据集均匀地分割成两部分，从而使得生成的 $k d$ 树具有较好的搜索效率。通过平衡操作，可以避免出现树过深或者某一侧节点过多而导致搜索效率下降的情况。\"\n}",
                    "role": "assistant",
                    "function_call": null,
                    "tool_calls": null
                }
            }
        ],
        "created": 1710740652,
        "model": "gpt-3.5-turbo-1106",
        "object": "chat.completion",
        "system_fingerprint": "fp_4aaaf0dc94",
        "usage": {
            "completion_tokens": 1461,
            "prompt_tokens": 4249,
            "total_tokens": 5710
        },
        "parameters": {
            "model": "gpt-3.5-turbo-1106",
            "temperature": 0.2,
            "frequency_penalty": 0.15,
            "presence_penalty": 0.15
        }
    }
]