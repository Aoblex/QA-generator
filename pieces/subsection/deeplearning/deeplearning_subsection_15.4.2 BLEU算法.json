[
    {
        "strategy": "subsection",
        "source": "deeplearning",
        "title": "15.4.2 BLEU算法",
        "content_length": 2018,
        "content": "Title: 15.4.2 BLEU算法\nContent:\nBLEU ( BiLingual Evaluation Understudy) 算法是一种衡量模型生成序列和参考序列之间的 $\\mathrm{N}$ 元词组 (N-Gram) 重合度的算法, 最早用来评价机器翻译模型的质量, 目前也广泛应用在各种序列生成任务中.\n\n令 $\\boldsymbol{x}$ 为从模型分布 $p_{\\theta}$ 中生成的一个候选 (Candidate) 序列, $\\boldsymbol{s}^{(1)}, \\cdots, \\boldsymbol{s}^{(K)}$为从真实数据分布中采集的一组参考 (Reference) 序列, $\\mathcal{W}$ 为从生成的候选序列中提取所有 $N$ 元组合的集合, 这些 $N$ 元组合的精度 (Precision )\n\n\n\\begin{equation*}\nP_{N}(\\boldsymbol{x})=\\frac{\\sum_{w \\in \\mathcal{W}} \\min \\left(c_{w}(\\boldsymbol{x}), \\max _{k=1}^{K} c_{w}\\left(\\boldsymbol{s}^{(k)}\\right)\\right)}{\\sum_{w \\in \\mathcal{W}} c_{w}(\\boldsymbol{x})} \\tag{15.39}\n\\end{equation*}\n\n\n其中 $c_{w}(\\boldsymbol{x})$ 是 $\\mathrm{N}$ 元组合 $w$ 在生成序列 $\\boldsymbol{x}$ 中出现的次数, $c_{w}\\left(\\boldsymbol{s}^{(k)}\\right)$ 是 $\\mathrm{N}$ 元组合 $w$ 在参考序列 $\\boldsymbol{s}^{(k)}$ 中出现的次数. $\\mathrm{N}$ 元组合的精度 $P_{N}(\\boldsymbol{x})$ 是计算生成序列中的 $\\mathrm{N}$ 元组合有多少比例在参考序列中出现.\n\n由于精度只衡量生成序列中的 $\\mathrm{N}$ 元组合是否在参考序列中出现, 生成序列越短, 其精度会越高, 因此可以引入长度惩罚因子 (Brevity Penalty). 如果生成序 \\href{https://nndl.github.io/%E5%87%A0%E4%BD%95%E5%B9%B3%E5%9D%87%E6%95%B0%E6%98%AF%E4%B8%80%E7%A7%8D%E6%B1%82%E6%95%B0%E5%80%BC%E5%B9%B3%E5%9D%87%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95}{https://nndl.github.io/几何平均数是一种求数值平均数的方法}, 计算公式为: $\\bar{x}=$ $\\sqrt[n]{\\prod_{t=1}^{n} x_{t}}$.\\\\\n列的长度短于参考序列, 就对其进行惩罚.\n\n\\[\nb(\\boldsymbol{x})=\\left\\{\\begin{array}{ccc}\n1 & \\text { if } & l_{x}>l_{s}  \\tag{15.40}\\\\\n\\exp \\left(1-l_{s} / l_{x}\\right) & \\text { if } \\quad l_{x} \\leq l_{s}\n\\end{array}\\right.\n\\]\n\n其中 $l_{x}$ 为生成序列 $\\boldsymbol{x}$ 的长度, $l_{s}$ 为参考序列的最短长度.\n\nBLEU 算法是通过计算不同长度的 $\\mathrm{N}$ 元组合 $(N=1,2, \\cdots)$ 的精度, 并进行几何加权平均而得到.\n\n\n\\begin{equation*}\n\\operatorname{BLEU}-\\mathrm{N}(\\boldsymbol{x})=b(\\boldsymbol{x}) \\times \\exp \\left(\\sum_{N=1}^{N^{\\prime}} \\alpha_{N} \\log P_{N}\\right) \\tag{15.41}\n\\end{equation*}\n\n\n其中 $N^{\\prime}$ 为最长 $\\mathrm{N}$ 元组合的长度, $\\alpha_{N}$ 为不同 $\\mathrm{N}$ 元组合的权重, 一般设为 $\\frac{1}{N^{\\prime}}$. BLEU 参见习题15-4.算法的值域范围是 $[0,1]$, 越大表明生成的质量越好. 但是 BLEU 算法只计算精度, 而不关心召回率 (即参考序列里的 $\\mathrm{N}$ 元组合是否在生成序列中出现 )."
    },
    {
        "id": "chatcmpl-946WQfHIKHYKo7TijUA5mQtqr2Q3B",
        "choices": [
            {
                "finish_reason": "stop",
                "index": 0,
                "logprobs": null,
                "message": {
                    "content": "{\n    \"问题1\": \"BLEU算法的主要用途是什么？\",\n    \"回答1\": \"BLEU算法主要用于衡量模型生成序列和参考序列之间的N元词组重合度，最早用来评价机器翻译模型的质量，目前也广泛应用在各种序列生成任务中。\",\n    \"问题2\": \"BLEU算法中的精度$P_{N}(\\boldsymbol{x})$是如何计算的？\",\n    \"回答2\": \"精度$P_{N}(\\boldsymbol{x})$是通过计算生成序列中的N元组合在参考序列中出现的比例来得到的。具体计算公式为$P_{N}(\\boldsymbol{x})=\\frac{\\text{∑}_{w \\text{ 在 } \\text{∈} \\text{W}} \\text{min} \\big(c_{w}(\\boldsymbol{x}), \\text{max}_{k=1}^{K} c_{w}(\\boldsymbol{s}^{(k)})\\big)}{\\text{∑}_{w \\text{ 在 } \\text{∈} \\text{W}} c_{w}(\\boldsymbol{x})}$。\",\n    \"问题3\": \"BLEU算法中的长度惩罚因子$ b(\\boldsymbol{x}) $是如何定义的？\",\n    \"回答3\": \"长度惩罚因子$ b(\\boldsymbol{x}) $根据生成序列$\\boldsymbol{x}$的长度和参考序列的最短长度进行定义。具体定义为：$b(\\boldsymbol{x})=\\begin{cases} 1 & \\text{if } l_{x}>l_{s} \\\\ \\text{exp}\\big(1-l_{s}/l_{x}\\big) & \\text{if } l_{x} \\text{≤} l_{s} \\\\\\text{(15.40)}\\tag{15.40}\\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{} \\\\\\text{}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}\\tag{15.40}$\",\n    \"问题4\": \"BLEU算法中的几何加权平均是如何得到的？\",\n    \"回答4\": \"BLEU算法通过计算不同长度的N元组合（N=1,2,⋯）的精度，并进行几何加权平均而得到。具体计算公式为$\\text{BLEU}-\\text{N}(\\boldsymbol{x})=b(\\boldsymbol{x})\\times\\text{exp}\\big(\\text{∑}_{N=1}^{N^{\\text{'}}}\\big(\\frac{\\text{}1}{\\text{}N^{\\text{'}}}\\big)\\times\\text{}α_{N} \\times\\text{}log P_{N}\\big)$。\",\n    \"问题5\": \"BLEU算法的值域范围是多少？\",\n    \"回答5\": \"BLEU算法的值域范围是[0,1]，数值越大表明生成的质量越好。但是需要注意，BLEU算法只计算精度，而不关心召回率（即参考序列里的N元组合是否在生成序列中出现）。\",\n    \"问题6\": \"BLEU算法中的参数$N^{\\text{'}}$和$α_{N}$分别代表什么意义？\",\n    \"回答6\": \"参数$N^{\\text{'}}$代表最长N元组合的长度，而$α_{N}$代表不同N元组合的权重，一般设为$\\frac{\\text{}1}{\\text{}N^{\\text{'}}}$。\",\n    \"问题7\": \"在BLEU算法中，为什么需要引入长度惩罚因子？\",\n    \"回答7\": \"在BLEU算法中，引入长度惩罚因子是因为生成序列越短，其精度会越高。为了避免这种情况，需要对生成序列进行长度惩罚，以保证对不同长度生成序列的公正评价。\",\n    \"问题8\": \"BLEU算法如何衡量模型生成序列和参考序列之间的重合度？\",\n    \"回答8\": \"BLEU算法通过计算不同长度的N元组合（N=1,2,⋯）的精度，并进行几何加权平均来衡量模型生成序列和参考序列之间的重合度。\",\n    \"问题9\": \"在BLEU算法中，为什么需要计算不同长度的N元组合的精度？\",\n    \"回答9\": \"在BLEU算法中，计算不同长度的N元组合的精度是为了全面评估模型生成序列和参考序列之间的重合度。通过考虑不同长度的N元组合，可以更全面地了解模型生成序列与参考序列之间的匹配情况。\",\n    \"问题10\": \"BLEU算法适用于哪些任务？\",\n    \"回答10\": \"BLEU算法最早用来评价机器翻译模型的质量，目前也广泛应用在各种序列生成任务中，包括自然语言处理、语音识别等领域。\"\n}",
                    "role": "assistant",
                    "function_call": null,
                    "tool_calls": null
                }
            }
        ],
        "created": 1710765410,
        "model": "gpt-3.5-turbo-1106",
        "object": "chat.completion",
        "system_fingerprint": "fp_4aaaf0dc94",
        "usage": {
            "completion_tokens": 1562,
            "prompt_tokens": 3740,
            "total_tokens": 5302
        },
        "parameters": {
            "model": "gpt-3.5-turbo-1106",
            "temperature": 0.2,
            "frequency_penalty": 0.15,
            "presence_penalty": 0.15
        }
    }
]